data "aws_iam_policy" "iam_ebs" {
  name = var.ebs_policy_name
  depends_on  = [module.iam_policy]
  }

module "iam_assumable_role_with_oidc_ebs"  {
  source  = "terraform-aws-modules/iam/aws//modules/iam-assumable-role-with-oidc"
  create_role = true
  role_name = var.ebs_role_name
  tags = {
    Role = var.ebs_role_name
  }

  provider_url = data.aws_eks_cluster.eks_cluster.identity[0].oidc[0].issuer
  role_policy_arns = [ data.aws_iam_policy.iam_ebs.arn,
  ]
  number_of_role_policy_arns = 1
  depends_on              = [module.iam_policy, data.aws_iam_policy.iam_ebs, data.aws_eks_cluster.eks_cluster]
}



module "iam_policy_ebs"  {
  source  = "terraform-aws-modules/iam/aws//modules/iam-policy"
  name        = var.ebs_policy_name
  path        = "/"
  description = "EBS CSI driver Policy for EKS Cluster"
  depends_on              = [module.eks]
  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateSnapshot",
                "ec2:AttachVolume",
                "ec2:DetachVolume",
                "ec2:ModifyVolume",
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeInstances",
                "ec2:DescribeSnapshots",
                "ec2:DescribeTags",
                "ec2:DescribeVolumes",
                "ec2:DescribeVolumesModifications"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateTags"
            ],
            "Resource": [
                "arn:aws:ec2:*:*:volume/*",
                "arn:aws:ec2:*:*:snapshot/*"
            ],
            "Condition": {
                "StringEquals": {
                    "ec2:CreateAction": [
                        "CreateVolume",
                        "CreateSnapshot"
                    ]
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DeleteTags"
            ],
            "Resource": [
                "arn:aws:ec2:*:*:volume/*",
                "arn:aws:ec2:*:*:snapshot/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateVolume"
            ],
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "aws:RequestTag/ebs.csi.aws.com/cluster": "true"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateVolume"
            ],
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "aws:RequestTag/CSIVolumeName": "*"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateVolume"
            ],
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "aws:RequestTag/kubernetes.io/cluster/*": "owned"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DeleteVolume"
            ],
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DeleteVolume"
            ],
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/CSIVolumeName": "*"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DeleteVolume"
            ],
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/kubernetes.io/cluster/*": "owned"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DeleteSnapshot"
            ],
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/CSIVolumeSnapshotName": "*"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DeleteSnapshot"
            ],
            "Resource": "*",
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true"
                }
            }
        }
    ]
}
EOF
}


################################################################################
# EKS Module
################################################################################

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 19.0"
  cluster_version = var.cluster_version
  cluster_name                         = var.cluster_name
  cluster_endpoint_public_access_cidrs = var.cluster_endpoint_public_access_cidrs
  cluster_endpoint_public_access       = true

  cluster_addons = {
    coredns = {
      most_recent = true
    }
    kube-proxy = {
      most_recent = true
    }
    vpc-cni = {
      most_recent = true
    }
    aws-ebs-csi-driver = {
      most_recent = true 
      service_account_role_arn = "arn:aws:iam::${var.account}:role/${var.ebs_role_name}"
    }

  }

  # EKS encryption key
  create_kms_key = false
  cluster_encryption_config = {
    resources        = ["secrets"]
    provider_key_arn = module.kms.key_arn
  }

  vpc_id                   = module.vpc.vpc_id
  subnet_ids               = module.vpc.private_subnets


#Cluster security groups

  # Cluster security group rules
  cluster_security_group_additional_rules = {
    ingress_nodes_ephemeral_ports_tcp = {
      description                = "Nodes on ephemeral ports"
      protocol                   = "tcp"
      from_port                  = 1025
      to_port                    = 65535
      type                       = "ingress"
      source_node_security_group = true
    }
  }

  # node-to-node security group rules
  node_security_group_additional_rules = {
    ingress_self_all = {
      description = "Node to node all ports/protocols"
      protocol    = "-1"
      from_port   = 0
      to_port     = 0
      type        = "ingress"
      self        = true
    }
  }

  
  # EKS Managed Node Group(s)
  
  eks_managed_node_groups = {
    node-1 = {
      min_size         = var.min_size1
      max_size         = var.max_size1
      desired_size     = var.desired_size1
      node_group_name  = var.NodeGroup1_name
      instance_types   = var.instance_types1
      capacity_type    = var.capacity_type1
      use_custom_launch_template = false
      disk_size        = 120
      labels = {
        managed_by     = "terraform"
        cluster        = var.cluster_name
        environment    = var.environment
        account        = var.account
      }

      taints = var.taints_node_group_1

      update_config = {
        max_unavailable_percentage = 33 # or set `max_unavailable`
      }

    }
    node-2 = {
      min_size         = var.min_size2
      max_size         = var.max_size2
      desired_size     = var.desired_size2
      node_group_name  = var.NodeGroup2_name
      instance_types   = var.instance_types2
      capacity_type    = var.capacity_type2
      
      labels = {
        managed_by     = "terraform"
        cluster        = var.cluster_name
        environment    = var.environment
        account        = var.account
      }

      taints = var.taints_node_group_2
      update_config = {
        max_unavailable_percentage = 33 # or set `max_unavailable`
      }
    }
  }
    
  
   # OIDC Identity provider
   cluster_identity_providers = {
     sts = {
       client_id = "sts.amazonaws.com"
     }
   }


  # aws-auth configmap
  manage_aws_auth_configmap = true

  aws_auth_roles = [
    {
      rolearn  = "arn:aws:iam::${var.account}:role/semi-admin"
      username = "semi-admin"
      groups   = ["system:masters"]
    },
    {
      rolearn  = "arn:aws:iam::${var.account}:role/OrganizationAccountAccessRole"
      username = "OrganizationAccountAccessRole"
      groups   = ["system:masters"]
    },
    {
      rolearn  = "arn:aws:iam::${var.account}:role/dev.eks-access.role"
      username = "dev.eks-access.role"
      groups   = ["system:masters"]
    },
    {
      rolearn  = "arn:aws:iam::${var.account}:role/code-deploy-role"
      username = "code-deploy-role"
      groups   = ["system:masters"]
    },
  ]

  aws_auth_users = [
    {
      userarn  = "arn:aws:iam::${var.account}:user/code-deploy-user"
      username = "code-deploy-user"
      groups   = ["system:masters"]
    },
    {
      userarn  = "arn:aws:iam::${var.account}:user/terraform"
      username = "terraform"
      groups   = ["system:masters"]
    }, 
  ]

  aws_auth_accounts = [
    var.account,
  ]

  tags = local.tags
}
################################################################################
# VPC
################################################################################

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 3.0"
  name = "${var.cluster_name}-vpc"
  cidr = var.vpc_cidr
  azs             = local.azs
  private_subnets = [for k, v in local.azs : cidrsubnet(var.vpc_cidr, 4, k)]
  public_subnets  = [for k, v in local.azs : cidrsubnet(var.vpc_cidr, 8, k + 48)]

  enable_nat_gateway   = true
  single_nat_gateway   = false
  enable_dns_hostnames = true

  enable_flow_log                      = true
  create_flow_log_cloudwatch_iam_role  = true
  create_flow_log_cloudwatch_log_group = true

  public_subnet_tags = {
    "kubernetes.io/role/elb" = 1
  }

  private_subnet_tags = {
    "kubernetes.io/role/internal-elb" = 1
  }

  tags = local.tags
}

################################################################################
# KMS
################################################################################

module "kms" {
  source  = "terraform-aws-modules/kms/aws"
  version = "1.1.0"

  aliases               = ["eks/${var.cluster_name}"]
  description           = "${var.cluster_name} cluster encryption key"
  enable_default_policy = true
  key_owners            = ["arn:aws:iam::${var.account}:user/terraform"]

  tags = local.tags
} 
data "aws_eks_cluster" "eks_cluster" {
  name = var.cluster_name
  depends_on  = [module.eks]
}
data "aws_iam_policy" "iam" {
  name = var.lb_policy_name
  depends_on  = [module.iam_policy]
  }

module "iam_assumable_role_with_oidc"  {
  source  = "terraform-aws-modules/iam/aws//modules/iam-assumable-role-with-oidc"
  create_role = true
  role_name = var.lb_role_name
  tags = {
    Role = var.lb_role_name
  }

  provider_url = data.aws_eks_cluster.eks_cluster.identity[0].oidc[0].issuer
  role_policy_arns = [ data.aws_iam_policy.iam.arn,
  ]
  number_of_role_policy_arns = 1
  depends_on              = [module.iam_policy]
}


module "iam_policy"  {
  source  = "terraform-aws-modules/iam/aws//modules/iam-policy"
  name        = var.lb_policy_name
  path        = "/"
  description = "LoadBalancer Controller Policy for EKS Cluster"
  depends_on              = [module.eks]
  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "ec2:CreateTags",
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
                "StringEquals": {
                    "ec2:CreateAction": "CreateSecurityGroup"
                },
                "Null": {
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
                "ec2:DeleteTags",
                "ec2:CreateTags"
            ],
            "Resource": "arn:aws:ec2:*:*:security-group/*",
            "Condition": {
                "Null": {
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor2",
            "Effect": "Allow",
            "Action": [
                "ec2:RevokeSecurityGroupIngress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:DeleteSecurityGroup"
            ],
            "Resource": "*",
            "Condition": {
                "Null": {
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor3",
            "Effect": "Allow",
            "Action": [
                "ec2:AuthorizeSecurityGroupIngress",
                "elasticloadbalancing:ModifyListener",
                "wafv2:AssociateWebACL",
                "ec2:DescribeInstances",
                "wafv2:GetWebACLForResource",
                "iam:ListServerCertificates",
                "ec2:DescribeCoipPools",
                "wafv2:GetWebACL",
                "ec2:DescribeInternetGateways",
                "elasticloadbalancing:SetWebAcl",
                "elasticloadbalancing:DescribeLoadBalancers",
                "waf-regional:GetWebACLForResource",
                "waf-regional:GetWebACL",
                "elasticloadbalancing:CreateRule",
                "ec2:DescribeAccountAttributes",
                "elasticloadbalancing:AddListenerCertificates",
                "iam:GetServerCertificate",
                "wafv2:DisassociateWebACL",
                "ec2:DescribeVpcPeeringConnections",
                "shield:GetSubscriptionState",
                "ec2:RevokeSecurityGroupIngress",
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "acm:DescribeCertificate",
                "elasticloadbalancing:DescribeTargetGroupAttributes",
                "shield:CreateProtection",
                "elasticloadbalancing:ModifyRule",
                "elasticloadbalancing:DescribeRules",
                "ec2:DescribeSubnets",
                "waf-regional:AssociateWebACL",
                "ec2:DescribeAddresses",
                "shield:DescribeProtection",
                "shield:DeleteProtection",
                "elasticloadbalancing:RemoveListenerCertificates",
                "elasticloadbalancing:CreateListener",
                "ec2:DescribeNetworkInterfaces",
                "elasticloadbalancing:DescribeListeners",
                "ec2:DescribeAvailabilityZones",
                "ec2:CreateSecurityGroup",
                "acm:ListCertificates",
                "elasticloadbalancing:DescribeListenerCertificates",
                "elasticloadbalancing:DeleteRule",
                "cognito-idp:DescribeUserPoolClient",
                "elasticloadbalancing:DescribeSSLPolicies",
                "waf-regional:DisassociateWebACL",
                "ec2:DescribeTags",
                "ec2:GetCoipPoolUsage",
                "elasticloadbalancing:DescribeTags",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeVpcs",
                "elasticloadbalancing:DescribeTargetHealth",
                "elasticloadbalancing:DescribeTargetGroups",
                "elasticloadbalancing:DeleteListener"
            ],
            "Resource": "*"
        },
        {
            "Sid": "VisualEditor4",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:CreateLoadBalancer",
                "elasticloadbalancing:CreateTargetGroup"
            ],
            "Resource": "*",
            "Condition": {
                "Null": {
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor5",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:CreateLoadBalancer",
                "elasticloadbalancing:CreateTargetGroup"
            ],
            "Resource": "*",
            "Condition": {
                "Null": {
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor6",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:RemoveTags",
                "elasticloadbalancing:AddTags"
            ],
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*"
            ],
            "Condition": {
                "Null": {
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor7",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:RemoveTags",
                "elasticloadbalancing:AddTags"
            ],
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
                "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
            ],
            "Condition": {
                "Null": {
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor8",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:DeleteLoadBalancer",
                "elasticloadbalancing:SetSecurityGroups",
                "elasticloadbalancing:SetIpAddressType",
                "elasticloadbalancing:SetSubnets",
                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                "elasticloadbalancing:DeleteTargetGroup",
                "elasticloadbalancing:ModifyTargetGroupAttributes",
                "elasticloadbalancing:ModifyTargetGroup"
            ],
            "Resource": "*",
            "Condition": {
                "Null": {
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor9",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:DeleteLoadBalancer",
                "elasticloadbalancing:SetSecurityGroups",
                "elasticloadbalancing:SetIpAddressType",
                "elasticloadbalancing:SetSubnets",
                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                "elasticloadbalancing:DeleteTargetGroup",
                "elasticloadbalancing:ModifyTargetGroupAttributes",
                "elasticloadbalancing:ModifyTargetGroup"
            ],
            "Resource": "*",
            "Condition": {
                "Null": {
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                }
            }
        },
        {
            "Sid": "VisualEditor10",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:RemoveTags",
                "elasticloadbalancing:AddTags"
            ],
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
            ]
        },
        {
            "Sid": "VisualEditor11",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:RemoveTags",
                "elasticloadbalancing:AddTags"
            ],
            "Resource": [
                "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
            ]
        },
        {
            "Sid": "VisualEditor12",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:DeregisterTargets"
            ],
            "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
        },
        {
            "Sid": "VisualEditor13",
            "Effect": "Allow",
            "Action": "iam:CreateServiceLinkedRole",
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                }
            }
        },
        {
            "Sid": "VisualEditor14",
            "Effect": "Allow",
            "Action": [
                "elasticloadbalancing:RegisterTargets",
                "elasticloadbalancing:DeregisterTargets"
            ],
            "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
        }
    ]
}
EOF
}

terraform {
  backend "s3" {
    skip_credentials_validation = true
    skip_metadata_api_check     = true
    region                      = "us-east-2"
    bucket                      = "ops-terraform-state-dev-001"
    key                         = "tfstate/terraform-eks-rc.tfstate"
  }
}


provider "aws" {
  region = var.region
}

provider "kubernetes" {
  host                   = module.eks.cluster_endpoint
  cluster_ca_certificate = base64decode(module.eks.cluster_certificate_authority_data)

  exec {
    api_version = "client.authentication.k8s.io/v1beta1"
    command     = "aws"
    # This requires the awscli to be installed locally where Terraform is executed
    args = ["eks", "get-token", "--cluster-name", module.eks.cluster_name]
  }
}

data "aws_availability_zones" "available" {}
data "aws_caller_identity" "current" {}


locals {
    azs      = slice(data.aws_availability_zones.available.names, 0, 3)
    tags = {
    managed_by    = "terraform"
    cluster       = var.cluster_name
    environment   = var.environment
    owner         = var.owner
    account       = var.account
  }
}

################################################################################
# Cluster Output
################################################################################
output "cluster_name" {
  description = "The name of the EKS cluster"
  value       = module.eks.cluster_name
}


output "cluster_arn" {
  description = "The Amazon Resource Name (ARN) of the cluster"
  value       = module.eks.cluster_arn
}


output "cluster_id" {
  description = "The ID of the EKS cluster. Note: currently a value is returned only for local EKS clusters created on Outposts"
  value       = module.eks.cluster_id
}


output "cluster_oidc_issuer_url" {
  description = "The URL on the EKS cluster for the OpenID Connect identity provider"
  value       = module.eks.cluster_oidc_issuer_url
}


output "cluster_status" {
  description = "Status of the EKS cluster. One of `CREATING`, `ACTIVE`, `DELETING`, `FAILED`"
  value       = module.eks.cluster_status
}

output "security-group-internal" {
  description = "Id of the security group used for internal access through HTTP and HTTPS"
  value       = module.internal_access.security_group_id
}

module "internal_access" {
  source = "terraform-aws-modules/security-group/aws"

  name   = "internal_access_eks_alb"
  vpc_id = module.vpc.vpc_id

  depends_on = [
    module.vpc
  ]

  ingress_with_cidr_blocks = [
    {
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      description = "VPN Israel"
      cidr_blocks = "212.59.70.12/32"
    },
    {
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      description = "VPN Securitize"
      cidr_blocks = "64.226.129.79/32"
    },
    {
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      description = "VPN Securitize"
      cidr_blocks = "167.179.64.35/32"
    },
    {
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      description = "QA jenkins"
      cidr_blocks = "3.21.174.147/32"
    },
    {
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "VPN Israel"
      cidr_blocks = "212.59.70.12/32"
    },
    {
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "VPN Securitize"
      cidr_blocks = "64.226.129.79/32"
    },
    {
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "VPN Securitize"
      cidr_blocks = "167.179.64.35/32"
    },
    {
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      description = "QA jenkins"
      cidr_blocks = "3.21.174.147/32"
    },
    
  ]

  egress_cidr_blocks      = ["0.0.0.0/0"]
}

#General settings
account     = "766597584338"
environment = "rc"
region      = "us-east-2"

#Cluster settings
cluster_name                   = "cluster-eks-rc"
cluster_version                = "1.24"
cluster_endpoint_public_access = true


#Node 1 settings
NodeGroup1_name = "Default"
min_size1       = 20
max_size1       = 35
desired_size1   = 35
instance_types1 = ["r5.large" ,"c4.xlarge" ,"c5.xlarge" ,"t3.large"]
capacity_type1  = "SPOT"
#Taints
taints_node_group_1 = {}

#Node 2 settings
NodeGroup2_name = "jobs"
min_size2       = 1
max_size2       = 1
desired_size2   = 1
instance_types2 = ["t3.large"]
capacity_type2  = "ON_DEMAND"
# Taints
taints_node_group_2 = {
  dedicated = {
    key            = "dedicated"
    value          = "jobs"
    effect         = "NO_SCHEDULE"
  }
}

#VPC settings
vpc_cidr                             = "10.3.0.0/16"
cluster_endpoint_public_access_cidrs = ["3.20.109.134/32", "3.15.139.33/32", "212.59.70.12/32", "64.226.129.79/32", "212.59.70.12/32", "13.58.31.106/32", "167.179.64.35/32","18.218.79.251/32"]
enable_nat_gateway                   = true
single_nat_gateway                   = false
enable_dns_hostnames                 = true
enable_flow_log                      = true
create_flow_log_cloudwatch_iam_role  = true
create_flow_log_cloudwatch_log_group = true

#ELB Controller 
lb_role_name = "AmazonEKSLoadBalancerControllerRoleRC-eks"
lb_policy_name = "AWSLoadBalancerControllerIAMPolicyRC-eks"
lb_arn_role = "arn:aws:iam::766597584338:role/AmazonEKSLoadBalancerControllerRoleRC-eks"


#EBS-CSI Driver
ebs_role_name = "AmazonEKSEBS-CSI-DriverRoleRC-eks"
ebs_policy_name = "AWSEBS-CSI-DriverIAMPolicyRC-eks"
ebs_arn_role = "arn:aws:iam::766597584338:role/AmazonEKSEBS-CSI-DriverRoleRC-eks"

variable "region" {
  description = "AWS region"
  type        = string
  default     = ""
}

variable "profile" {
  description = "AWS profile"
  type        = string
  default     = ""
}

variable "access_key" {
  description = "AWS access key"
  type        = string
  default     = ""
}

variable "secret_key" {
  description = "AWS secret key"
  type        = string
  default     = ""
}

variable "cluster_name" {
  description = "cluster name"
  type        = string
  default     = ""
}

variable "cluster_endpoint_public_access" {
  description = "cluster endpoint public access"
  type        = bool
  default     = "true"
}

variable "cluster_version" {
  description = "cluster version"
  type        = string
  default     = ""
}

variable "NodeGroup1_name" {
  description = "Node Group name"
  type        = string
  default     = ""
}

variable "min_size1" {
  description = "node min size for nodegroup"
  type        = string
  default     = ""
}

variable "max_size1" {
  description = "node max size for nodegroup"
  type        = string
  default     = ""
}

variable "desired_size1" {
  type        = string
  default     = ""
}

variable "instance_types1" {
  type        = list(any)
  default     = [""]
}

variable "capacity_type1" {
  type        = string
  default     = ""
}

variable "NodeGroup2_name" {
  type        = string
  default     = ""
}

variable "min_size2" {
  type        = string
  default     = ""
}

variable "max_size2" {
  type        = string
  default     = ""
}

variable "desired_size2" {
  type        = string
  default     = ""
}

variable "instance_types2" {
  type        = list(any)
  default     = [""]
}

variable "capacity_type2" {
  type        = string
  default     = ""
}

variable "environment" {
  type        = string
  default     = ""
}

variable "taints_node_group_1" {
  type        = any
  default     = {}
}

variable "taints_node_group_2" {
  type        = any
  default     = {}
}

variable "single_nat_gateway" {
  type        = bool
  default     = "true"
}

variable "enable_flow_log" {
  type        = bool
  default     = "true"
}

variable "public_access_cidrs" {
  type        = list(any)
  default     = [""]
}

variable "private_subnets" {
  type        = list(any)
  default     = [""]
}

variable "public_subnets" {
  type        = list(any)
  default     = [""]
}

variable "create_flow_log_cloudwatch_log_group" {
  type        = bool
  default     = "true"
}

variable "enable_dns_hostnames" {
  type        = bool
  default     = "true"
}

variable "vpc_cidr" {
  type        = string
  default     = ""
}

variable "enable_nat_gateway" {
  type        = bool
  default     = "true"
}

variable "create_flow_log_cloudwatch_iam_role" {
  type        = bool
  default     = "true"
}

variable "cluster_service" {
  type        = string
  default     = ""
}

variable "cluster_endpoint_public_access_cidrs" {
  type        = list(any)
  default     = [""]
}

variable "one_nat_gateway_per_az" {
  description = "one nat gateway per az"
  type        = bool
  default = false
}

variable "lb_policy_name" {
  type        = string
  default     = ""
}

variable "lb_role_name" {
  type        = string
  default     = ""
}

variable "account" {
  type        = string
  default     = ""
}

variable "owner" {
  type        = string
  default     = ""
}

variable "provider_url" {
  description = "provider_url"
  type        = string
  default = ""
}

variable "lb_serviceAccount_name" {
  description = "Load Balnacer Controller Service Account"
  type        = string
  default = "aws-load-balancer-controller"
}

variable "lb_arn_role" {
  description = "Load Balnacer Controller ARN Role"
  type        = string
  default = "aws-load-balancer-controller"
}

variable "lb_namespace" {
  description = "Load Balnacer Controller namespace"
  type        = string
  default = "infra"
}

variable "ebs_policy_name" {
  type        = string
  default     = ""
}

variable "ebs_role_name" {
  type        = string
  default     = ""
}

terraform {
  required_version = ">= 1.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 4.47"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = ">= 2.10"
    }
  }
}
